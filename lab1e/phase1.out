
=================== Simulator Command Section =====================

Continuous Partial Tracing On: 0
Single Full Trace: 6

=================== Micro Memory Section =====================

    :   c  i a     s            c    b    a          : 
    :   o  n m  a  h mm    e    c    b    a          : 
  l :   n  t u  l  f ba rw n    c    b    a          : 
  c :   d  r x  u  t rr dr c    c    b    a    addr4 : 
--- : --- -- - -- -- -- -- - ---- ---- ---- -------- : 

    :   c  i a     s            c    b    a         
    :   o  n m  a  h mm    e    c    b    a         
    :   n  t u  l  f ba rw n    c    b    a         
    :   d  r x  u  t rr dr c    c    b    a    addr4
    : --- -- - -- -- -- -- - ---- ---- ---- --------
  0 : 011 00 0 00 00 00 00 1 0000 0101 0101 00000011 :  pc := (  0+  0); 
    :                                                : JMP    3;
    * 
    : start of loop (read loop)
  3 : 000 00 0 00 00 01 00 0 0000 0000 0000 00000000 : mar :=  pc; 
  4 : 000 00 0 00 00 00 10 0 0000 0000 0000 00000000 : rd; 
  5 : 000 00 0 00 00 00 10 0 0000 0000 0000 00000000 : rd; 
  6 : 000 00 1 00 00 00 00 1 0011 0101 0000 00000000 :  ir := (mbr+  0); 
  7 : 011 00 0 00 00 00 00 1 0000 0110 0000 00001010 :  pc := ( pc+ +1); 
    :                                                : JMP   10;
    : Check Op Codes 
    * 
    : Checks First Two bits. Goes to next line if 00 and branches to line 14 if 01 
 10 : 100  00001011   00001110   00000000   00000000 : JIR[7:6]  11  14   0   0
    : Checks bits 5 and 4 of Mac0. Goes to ADD intruction if 10 and SUb if 11 
 11 : 101  00001100   00000000   00101101   00000000 : JIR[5:4]  12   0  45   0
    : Checks if bits 2 and 3 are 00 01 10 11. 
 12 : 110  00001101   00010100   00000000   00000000 : JIR[3:2]  13  20   0   0
    : Checks bits 0 and 1.   
 13 : 111  11111111   00010010   00010010   00010010 : JIR[1:0] 255  18  18  18
    * 
    : Checks bits 5 and 4 if bits 7 and 6 are 0 1 respectively. Branches to 28 if 01 (CLR), to 31 if NEG, 40 if INC
 14 : 101  00000000   00011010   00011111   00101000 : JIR[5:4]   0  26  31  40

    * 
    : NOP operation 
 18 : 011 00 0 00 00 00 00 0 0000 0000 0000 00000011 : JMP    3;
    * 
 20 : 000 00 0 00 00 01 00 0 0000 0000 0000 00000000 : mar :=  pc; 
 21 : 000 00 0 00 00 00 10 0 0000 0000 0000 00000000 : rd; 
 22 : 000 00 0 00 00 00 10 0 0000 0000 0000 00000000 : rd; 
 23 : 000 00 1 00 00 00 00 1 1100 0101 0000 00000000 : gr0 := (mbr+  0); 
 24 : 011 00 0 00 00 00 00 1 0000 0101 1100 00000011 :  pc := (gr0+  0); 
    :                                                : JMP    3;
    * 
    : Checks what bits 3 and 2 correspond to which register. Goes to 27 if 00, goes to 28 if 01 ..... goes to 30 if 11 (CLR)  
 26 : 110  00011011   00011100   00011101   00011110 : JIR[3:2]  27  28  29  30
 27 : 011 00 0 00 00 00 00 1 1100 0101 0101 00000011 : gr0 := (  0+  0); 
    :                                                : JMP    3;
 28 : 011 00 0 00 00 00 00 1 1101 0101 0101 00000011 : gr1 := (  0+  0); 
    :                                                : JMP    3;
 29 : 011 00 0 00 00 00 00 1 1110 0101 0101 00000011 : gr2 := (  0+  0); 
    :                                                : JMP    3;
 30 : 011 00 0 00 00 00 00 1 1111 0101 0101 00000011 : gr3 := (  0+  0); 
    :                                                : JMP    3;
    * 
    : Checks which general register bits 3 and 2 correspond to. Jumps to corresponding line and does 2s complement operation (NEG)
 31 : 110  00100000   00100010   00100100   00100110 : JIR[3:2]  32  34  36  38
 32 : 000 00 0 11 00 00 00 1 1100 0101 1100 00000000 : gr0 := (gr0 NOT); 
 33 : 011 00 0 00 00 00 00 1 1100 1100 0110 00000011 : gr0 := ( +1+gr0); 
    :                                                : JMP    3;
 34 : 000 00 0 11 00 00 00 1 1101 0101 1101 00000000 : gr1 := (gr1 NOT); 
 35 : 011 00 0 00 00 00 00 1 1101 1101 0110 00000011 : gr1 := ( +1+gr1); 
    :                                                : JMP    3;
 36 : 000 00 0 11 00 00 00 1 1110 0101 1110 00000000 : gr2 := (gr2 NOT); 
 37 : 011 00 0 00 00 00 00 1 1110 1110 0110 00000011 : gr2 := ( +1+gr2); 
    :                                                : JMP    3;
 38 : 000 00 0 11 00 00 00 1 1111 0101 1111 00000000 : gr3 := (gr3 NOT); 
 39 : 011 00 0 00 00 00 00 1 1111 1111 0110 00000011 : gr3 := ( +1+gr3); 
    :                                                : JMP    3;
    * 
    : Checks what general register bits 3 and 2 correspond to. Jumps to corresponding line and increments  (INC)
 40 : 110  00101001   00101010   00101011   00101100 : JIR[3:2]  41  42  43  44
 41 : 011 00 0 00 00 00 00 1 1100 1100 0110 00000011 : gr0 := ( +1+gr0); 
    :                                                : JMP    3;
 42 : 011 00 0 00 00 00 00 1 1101 1101 0110 00000011 : gr1 := ( +1+gr1); 
    :                                                : JMP    3;
 43 : 011 00 0 00 00 00 00 1 1110 1110 0110 00000011 : gr2 := ( +1+gr2); 
    :                                                : JMP    3;
 44 : 011 00 0 00 00 00 00 1 1111 1111 0110 00000011 : gr3 := ( +1+gr3); 
    :                                                : JMP    3;
    * 
    : Checks last two bits for Register 2. Puts content into AC. Next step is on address 50. (ADD)
 45 : 111  00101110   00101111   00110000   00110001 : JIR[1:0]  46  47  48  49
 46 : 011 00 0 00 00 00 00 1 0001 1100 0101 00110010 :  ac := (  0+gr0); 
    :                                                : JMP   50;
 47 : 011 00 0 00 00 00 00 1 0001 1101 0101 00110010 :  ac := (  0+gr1); 
    :                                                : JMP   50;
 48 : 011 00 0 00 00 00 00 1 0001 1110 0101 00110010 :  ac := (  0+gr2); 
    :                                                : JMP   50;
 49 : 011 00 0 00 00 00 00 1 0001 1111 0101 00110010 :  ac := (  0+gr3); 
    :                                                : JMP   50;
    : Adds AC to Register 1 and puts the result in Register 1.
 50 : 110  00110011   00110100   00110101   00110110 : JIR[3:2]  51  52  53  54
 51 : 011 00 0 00 00 00 00 1 1100 1100 0001 00000011 : gr0 := ( ac+gr0); 
    :                                                : JMP    3;
 52 : 011 00 0 00 00 00 00 1 1101 1101 0001 00000011 : gr1 := ( ac+gr1); 
    :                                                : JMP    3;
 53 : 011 00 0 00 00 00 00 1 1110 1110 0001 00000011 : gr2 := ( ac+gr2); 
    :                                                : JMP    3;
 54 : 011 00 0 00 00 00 00 1 1111 1111 0001 00000011 : gr3 := ( ac+gr3); 
    :                                                : JMP    3;


=================== Main Memory Section =====================

  0 : 00000100 : 04=+004 : br
  1 : 00000100 : 04=+004 :  <==>               br
  2 : 00000000 : 00=+000 : hlt
  3 : 00000000 : 00=+000 : hlt
  4 : 00000100 : 04=+004 : br
  5 : 00000110 : 06=+006 :  <==>               bpoz
  6 : 00000001 : 01=+001 : nop
  7 : 01010000 : 50=+080 : clr gr0
  8 : 01010100 : 54=+084 : clr gr1
  9 : 01100000 : 60=+096 : neg gr0
 10 : 01110000 : 70=+112 : inc gr0
 11 : 00100100 : 24=+036 : sub gr1, gr0
 12 : 01100100 : 64=+100 : neg gr1
 13 : 00000000 : 00=+000 : hlt

=================== Input Specification Section =====================




=================== Tracing Output Section =====================

mpc : cycle : 
  0 :     0 :  pc := (  0+  0); JMP    3;

  3 :     1 : mar :=  pc; 

  4 :     2 : rd; 

  5 :     3 : rd; 

  6 :     4 :  ir := (mbr+  0); 
            : alt:00=+000; blt:00=+000; amx:04=+004; alu:04=+004; sft:04=+004; 
            :  pc:00=+000;  ac:???????;  sp:???????;  ir:04=+004; tir:???????; 
            :  t1:???????;  t2:???????;  t3:???????; psw:???????; 
            : gr0:???????; gr1:???????; gr2:???????; gr3:???????; 
            : mar:00=+000; mbr:04=+004
            : rcs:10000000 rbf:00=+000; xcs:10000000 xbf:00=+000; int: 000; 

  7 :     5 :  pc := ( pc+ +1); JMP   10;

 10 :     6 : JIR[7:6]  11  14   0   0

 11 :     7 : JIR[5:4]  12   0  45   0

 12 :     8 : JIR[3:2]  13  20   0   0

 20 :     9 : mar :=  pc; 

 21 :    10 : rd; 

 22 :    11 : rd; 

 23 :    12 : gr0 := (mbr+  0); 

 24 :    13 :  pc := (gr0+  0); JMP    3;

  3 :    14 : mar :=  pc; 

  4 :    15 : rd; 

  5 :    16 : rd; 

  6 :    17 :  ir := (mbr+  0); 
            : alt:04=+004; blt:00=+000; amx:04=+004; alu:04=+004; sft:04=+004; 
            :  pc:04=+004;  ac:???????;  sp:???????;  ir:04=+004; tir:???????; 
            :  t1:???????;  t2:???????;  t3:???????; psw:???????; 
            : gr0:04=+004; gr1:???????; gr2:???????; gr3:???????; 
            : mar:04=+004; mbr:04=+004
            : rcs:10000000 rbf:00=+000; xcs:10000000 xbf:00=+000; int: 000; 

  7 :    18 :  pc := ( pc+ +1); JMP   10;

 10 :    19 : JIR[7:6]  11  14   0   0

 11 :    20 : JIR[5:4]  12   0  45   0

 12 :    21 : JIR[3:2]  13  20   0   0

 20 :    22 : mar :=  pc; 

 21 :    23 : rd; 

 22 :    24 : rd; 

 23 :    25 : gr0 := (mbr+  0); 

 24 :    26 :  pc := (gr0+  0); JMP    3;

  3 :    27 : mar :=  pc; 

  4 :    28 : rd; 

  5 :    29 : rd; 

  6 :    30 :  ir := (mbr+  0); 
            : alt:06=+006; blt:00=+000; amx:01=+001; alu:01=+001; sft:01=+001; 
            :  pc:06=+006;  ac:???????;  sp:???????;  ir:01=+001; tir:???????; 
            :  t1:???????;  t2:???????;  t3:???????; psw:???????; 
            : gr0:06=+006; gr1:???????; gr2:???????; gr3:???????; 
            : mar:06=+006; mbr:01=+001
            : rcs:10000000 rbf:00=+000; xcs:10000000 xbf:00=+000; int: 000; 

  7 :    31 :  pc := ( pc+ +1); JMP   10;

 10 :    32 : JIR[7:6]  11  14   0   0

 11 :    33 : JIR[5:4]  12   0  45   0

 12 :    34 : JIR[3:2]  13  20   0   0

 13 :    35 : JIR[1:0] 255  18  18  18

 18 :    36 : JMP    3;

  3 :    37 : mar :=  pc; 

  4 :    38 : rd; 

  5 :    39 : rd; 

  6 :    40 :  ir := (mbr+  0); 
            : alt:07=+007; blt:00=+000; amx:50=+080; alu:50=+080; sft:50=+080; 
            :  pc:07=+007;  ac:???????;  sp:???????;  ir:50=+080; tir:???????; 
            :  t1:???????;  t2:???????;  t3:???????; psw:???????; 
            : gr0:06=+006; gr1:???????; gr2:???????; gr3:???????; 
            : mar:07=+007; mbr:50=+080
            : rcs:10000000 rbf:00=+000; xcs:10000000 xbf:00=+000; int: 000; 

  7 :    41 :  pc := ( pc+ +1); JMP   10;

 10 :    42 : JIR[7:6]  11  14   0   0

 14 :    43 : JIR[5:4]   0  26  31  40

 26 :    44 : JIR[3:2]  27  28  29  30

 27 :    45 : gr0 := (  0+  0); JMP    3;

  3 :    46 : mar :=  pc; 

  4 :    47 : rd; 

  5 :    48 : rd; 

  6 :    49 :  ir := (mbr+  0); 
            : alt:08=+008; blt:00=+000; amx:54=+084; alu:54=+084; sft:54=+084; 
            :  pc:08=+008;  ac:???????;  sp:???????;  ir:54=+084; tir:???????; 
            :  t1:???????;  t2:???????;  t3:???????; psw:???????; 
            : gr0:00=+000; gr1:???????; gr2:???????; gr3:???????; 
            : mar:08=+008; mbr:54=+084
            : rcs:10000000 rbf:00=+000; xcs:10000000 xbf:00=+000; int: 000; 

  7 :    50 :  pc := ( pc+ +1); JMP   10;

 10 :    51 : JIR[7:6]  11  14   0   0

 14 :    52 : JIR[5:4]   0  26  31  40

 26 :    53 : JIR[3:2]  27  28  29  30

 28 :    54 : gr1 := (  0+  0); JMP    3;

  3 :    55 : mar :=  pc; 

  4 :    56 : rd; 

  5 :    57 : rd; 

  6 :    58 :  ir := (mbr+  0); 
            : alt:09=+009; blt:00=+000; amx:60=+096; alu:60=+096; sft:60=+096; 
            :  pc:09=+009;  ac:???????;  sp:???????;  ir:60=+096; tir:???????; 
            :  t1:???????;  t2:???????;  t3:???????; psw:???????; 
            : gr0:00=+000; gr1:00=+000; gr2:???????; gr3:???????; 
            : mar:09=+009; mbr:60=+096
            : rcs:10000000 rbf:00=+000; xcs:10000000 xbf:00=+000; int: 000; 

  7 :    59 :  pc := ( pc+ +1); JMP   10;

 10 :    60 : JIR[7:6]  11  14   0   0

 14 :    61 : JIR[5:4]   0  26  31  40

 31 :    62 : JIR[3:2]  32  34  36  38

 32 :    63 : gr0 := (gr0 NOT); 

 33 :    64 : gr0 := ( +1+gr0); JMP    3;

  3 :    65 : mar :=  pc; 

  4 :    66 : rd; 

  5 :    67 : rd; 

  6 :    68 :  ir := (mbr+  0); 
            : alt:0A=+010; blt:00=+000; amx:70=+112; alu:70=+112; sft:70=+112; 
            :  pc:0A=+010;  ac:???????;  sp:???????;  ir:70=+112; tir:???????; 
            :  t1:???????;  t2:???????;  t3:???????; psw:???????; 
            : gr0:00=+000; gr1:00=+000; gr2:???????; gr3:???????; 
            : mar:0A=+010; mbr:70=+112
            : rcs:10000000 rbf:00=+000; xcs:10000000 xbf:00=+000; int: 000; 

  7 :    69 :  pc := ( pc+ +1); JMP   10;

 10 :    70 : JIR[7:6]  11  14   0   0

 14 :    71 : JIR[5:4]   0  26  31  40

 40 :    72 : JIR[3:2]  41  42  43  44

 41 :    73 : gr0 := ( +1+gr0); JMP    3;

  3 :    74 : mar :=  pc; 

  4 :    75 : rd; 

  5 :    76 : rd; 

  6 :    77 :  ir := (mbr+  0); 
            : alt:0B=+011; blt:00=+000; amx:24=+036; alu:24=+036; sft:24=+036; 
            :  pc:0B=+011;  ac:???????;  sp:???????;  ir:24=+036; tir:???????; 
            :  t1:???????;  t2:???????;  t3:???????; psw:???????; 
            : gr0:01=+001; gr1:00=+000; gr2:???????; gr3:???????; 
            : mar:0B=+011; mbr:24=+036
            : rcs:10000000 rbf:00=+000; xcs:10000000 xbf:00=+000; int: 000; 

  7 :    78 :  pc := ( pc+ +1); JMP   10;

 10 :    79 : JIR[7:6]  11  14   0   0

 11 :    80 : JIR[5:4]  12   0  45   0

 45 :    81 : JIR[1:0]  46  47  48  49

 46 :    82 :  ac := (  0+gr0); JMP   50;

 50 :    83 : JIR[3:2]  51  52  53  54

 52 :    84 : gr1 := ( ac+gr1); JMP    3;

  3 :    85 : mar :=  pc; 

  4 :    86 : rd; 

  5 :    87 : rd; 

  6 :    88 :  ir := (mbr+  0); 
            : alt:0C=+012; blt:00=+000; amx:64=+100; alu:64=+100; sft:64=+100; 
            :  pc:0C=+012;  ac:01=+001;  sp:???????;  ir:64=+100; tir:???????; 
            :  t1:???????;  t2:???????;  t3:???????; psw:???????; 
            : gr0:01=+001; gr1:01=+001; gr2:???????; gr3:???????; 
            : mar:0C=+012; mbr:64=+100
            : rcs:10000000 rbf:00=+000; xcs:10000000 xbf:00=+000; int: 000; 

  7 :    89 :  pc := ( pc+ +1); JMP   10;

 10 :    90 : JIR[7:6]  11  14   0   0

 14 :    91 : JIR[5:4]   0  26  31  40

 31 :    92 : JIR[3:2]  32  34  36  38

 34 :    93 : gr1 := (gr1 NOT); 

 35 :    94 : gr1 := ( +1+gr1); JMP    3;

  3 :    95 : mar :=  pc; 

  4 :    96 : rd; 

  5 :    97 : rd; 

  6 :    98 :  ir := (mbr+  0); 
            : alt:0D=+013; blt:00=+000; amx:00=+000; alu:00=+000; sft:00=+000; 
            :  pc:0D=+013;  ac:01=+001;  sp:???????;  ir:00=+000; tir:???????; 
            :  t1:???????;  t2:???????;  t3:???????; psw:???????; 
            : gr0:01=+001; gr1:FF=-001; gr2:???????; gr3:???????; 
            : mar:0D=+013; mbr:00=+000
            : rcs:10000000 rbf:00=+000; xcs:10000000 xbf:00=+000; int: 000; 

  7 :    99 :  pc := ( pc+ +1); JMP   10;

 10 :   100 : JIR[7:6]  11  14   0   0

 11 :   101 : JIR[5:4]  12   0  45   0

 12 :   102 : JIR[3:2]  13  20   0   0

 13 :   103 : JIR[1:0] 255  18  18  18




Execution terminated normally at microword 255.


255 :   103 : JIR[1:0] 255  18  18  18
            : alt:0D=+013; blt:01=+001; amx:0D=+013; alu:0E=+014; sft:0E=+014; 
            :  pc:0E=+014;  ac:01=+001;  sp:???????;  ir:00=+000; tir:???????; 
            :  t1:???????;  t2:???????;  t3:???????; psw:???????; 
            : gr0:01=+001; gr1:FF=-001; gr2:???????; gr3:???????; 
            : mar:0D=+013; mbr:00=+000
            : rcs:10000000 rbf:00=+000; xcs:10000000 xbf:00=+000; int: 000; 

            :  pc:0E=+014; psw:???????;  ir:00=+000; hlt
            : gr0:01=+001; gr1:FF=-001; gr2:???????; gr3:???????; 
            : rcs:10000000 rbf:00=+000; xcs:10000000 xbf:00=+000; int: 000; 
     Mem[0] :  04=+004 04=+004 00=+000 00=+000 04=+004 06=+006 01=+001 50=+080
     Mem[8] :  54=+084 60=+096 70=+112 24=+036 64=+100 00=+000 ??????? ???????



